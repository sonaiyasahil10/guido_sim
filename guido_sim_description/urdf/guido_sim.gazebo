<?xml version="1.0" ?>

<robot name="guido_sim" xmlns:xacro="http://www.ros.org/wiki/xacro" >

<xacro:property name="body_color" value="Gazebo/Silver" />
<xacro:property name="wheel_color" value="Gazebo/DarkGrey" />


<gazebo>
  <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
    <robotNamespace>/guido_sim</robotNamespace>
    <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    <legacyModeNS>true</legacyModeNS>
  </plugin>
</gazebo>

<gazebo>
<plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
  <updateRate>100.0</updateRate>
  <robotNamespace>/</robotNamespace>
  <leftFrontJoint>fl_joint</leftFrontJoint>
  <rightFrontJoint>fr_joint</rightFrontJoint>
  <leftRearJoint>bl_joint</leftRearJoint>
  <rightRearJoint>br_joint</rightRearJoint>
  <wheelSeparation>0.296</wheelSeparation>
 <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
  <wheelDiameter>0.1</wheelDiameter>
  <robotBaseFrame>base_link</robotBaseFrame>
  <topicName>/cmd_vel</topicName>
  <broadcastTF>true</broadcastTF>

 <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
  <torque>1</torque>

 <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
  <commandTopic>/cmd_vel</commandTopic>

  <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
  <odometryTopic>odom</odometryTopic>

  <!-- Odometry frame, defaults to `odom` -->
  <odometryFrame>odom</odometryFrame>

  <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
  <robotBaseFrame>base_link</robotBaseFrame>

  <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
  <odometrySource>1</odometrySource>

  <!-- Set to true to publish transforms for the wheel links, defaults to false -->
  <publishWheelTF>true</publishWheelTF>

  <!-- Set to true to publish transforms for the odometry, defaults to true -->
  <publishOdom>true</publishOdom>

  <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
  <publishWheelJointState>true</publishWheelJointState>
</plugin>
</gazebo>

<gazebo reference="lidar_1">
<sensor type="ray" name="idar">
  <pose>0 0 0 0 0 0</pose>
  <visualize>true</visualize>
  <update_rate>40</update_rate>
  <ray>
    <scan>
      <horizontal>
        <samples>720</samples>
        <resolution>1</resolution>
        <min_angle>-0.78539</min_angle>
        <max_angle>0.78539</max_angle>
      </horizontal>
    </scan>
    <range>
      <min>0.10</min>
      <max>30.0</max>
      <resolution>0.01</resolution>
    </range>
    <noise>
      <type>gaussian</type>
      <!-- Noise parameters based on published spec for Hokuyo laser
           achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
           stddev of 0.01m will put 99.7% of samples within 0.03m of the true
           reading. -->
      <mean>0.0</mean>
      <stddev>0.01</stddev>
    </noise>
  </ray>
  <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
    <topicName>/scan</topicName>
    <frameName>lidar_1</frameName>
  </plugin>
</sensor>
</gazebo>

<gazebo reference="base_link">
<material>${body_color}</material>
<mu1>0.2</mu1>
<mu2>0.2</mu2>
<selfCollide>true</selfCollide>
<gravity>true</gravity>
</gazebo>

<gazebo reference="fr_wheel__1">
  <material>${wheel_color}</material>
  <mu1>100</mu1>
  <mu2>100</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="fl_wheel__1">
  <material>${wheel_color}</material>
  <mu1>100</mu1>
  <mu2>100</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="bl_wheel___1">
  <material>${wheel_color}</material>
  <mu1>100</mu1>
  <mu2>100</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="br_wheel_1">
  <material>${wheel_color}</material>
  <mu1>100</mu1>
  <mu2>100</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="lidar_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="spacer_1_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="spacer_2_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="spacer_3_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="spacer_4_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="frame_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="cap_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="tablet_holder_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="tablet_1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

</robot>